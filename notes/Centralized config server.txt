Centralized config server - stores configuration file in github based on the application name (property file should be the same name as the application name)

Development steps:
1. Create springboot project (config-server) (dependencies: actuator, spring-cloud-config-server, eureka-client)
2. Register as Eureka client
3. set up git location (create a repository in git or config server)
	server.port=8888
	spring.application.name=CONFIG-SERVER
	eureka.instance.client.serverUrl.defaultZone=http://http://localhost:8761/eureka/


	spring.cloud.config.server.git.uri=https://github.com/fnodado/config-server-repo
	spring.cloud.config.server.git.clone-on-start=true
	spring.cloud.config.server.git.default-label=main
4. refactor your microservices to use config server 


Auto refresh using spring cloud bus with Rabbitmq
Development Steps:
1. Add spring-cloud-starter-bus-amqp to your microservices
2. install RabbitMQ using docker
3. RabbitMQ configuration in application.properties file in your microservices
	spring.rabbitmq.host=localhost
	spring.rabbitmq.port=5672
	spring.rabbitmq.username=guest
	spring.rabbitmq.password=guest
4. create simple rest api to check ( messageController)
5. call busrefresh